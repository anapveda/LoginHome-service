package com.players.LoginHome_service.Service.AuthenticationService;

import com.players.LoginHome_service.dto.AuthenticationResponse;
import com.players.LoginHome_service.dto.SignUpRequest;
import com.players.LoginHome_service.dto.UserDTO;
import com.players.LoginHome_service.model.Entity.User;
import com.players.LoginHome_service.model.enums.UserRole;
import com.players.LoginHome_service.repository.UserRepo;
import jakarta.annotation.PostConstruct;
import jakarta.persistence.EntityExistsException;
import org.hibernate.query.sqm.EntityTypeException;
import org.hibernate.service.spi.InjectService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;
//service for creating admin and customer accounts
@Service
public class Authenticationservice {
    @Autowired
    UserRepo userRepo;

    @PostConstruct
    public void createAdminAccount(){
        Optional<User> adminAcc=userRepo.findByUserRole(UserRole.ADMIN);
        if(adminAcc.isEmpty()){
            User u=new User();
            u.setEmail("admin@gmail.com");
            u.setPassword(new BCryptPasswordEncoder().encode("admin@123"));
            u.setUserRole(UserRole.ADMIN);
            userRepo.save(u);
            System.out.println("admin created sucessfully");
        }
        else{
            System.out.println("Admin already exisit");
        }
    }
  public UserDTO createUser(SignUpRequest signUpRequest){
    if(userRepo.findFirstByEmail(signUpRequest.getEmail()).isPresent()){
        throw new EntityExistsException("entity already exsist");
    }
    User u=new User();
    u.setEmail(signUpRequest.getEmail());
    u.setName(signUpRequest.getName());
    u.setUserRole(UserRole.CUSTOMER);
    u.setPassword(new BCryptPasswordEncoder().encode(signUpRequest.getPassword()));
    //save this in DB for a autogenerated ID

    User userCreated=userRepo.save(u);
    return userCreated.getUserDTO();
  }


    public AuthenticationResponse authenticateLoggedInUser(String username,String token) {

        AuthenticationResponse reponse=new AuthenticationResponse();
        Optional<User> u=userRepo.findFirstByEmail(username);
        if(u.isPresent()){
            reponse.setId(u.get().getUserid());
            reponse.setToken(token);
            reponse.setUserRole(u.get().getUserRole());
        }

        return reponse;
    }
}
